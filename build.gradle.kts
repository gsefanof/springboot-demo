/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.1/userguide/building_java_projects.html
 */

plugins {
    java
    id("org.springframework.boot") version "2.4.3"

    // Info and publishing
    id("nebula.info") version "9.2.2"
    id("nebula.maven-base-publish") version "17.3.2"
    id("nebula.spring-boot-jar") version "17.3.2"

    // Docker build support
    id("com.google.cloud.tools.jib") version "2.7.1"

    // Static-checks
    id("ru.vyarus.quality") version "4.4.0"
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

group = "ru.homecredit"
version = "0.1.0-SNAPSHOT"
description = "HC project"

tasks.compileJava { options.encoding = "UTF-8" }
tasks.javadoc{ options.encoding = "UTF-8" }
tasks.compileTestJava{ options.encoding = "UTF-8" }

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    implementation("com.google.guava:guava:29.0-jre")

    val verSpring = "2.4.3"

    implementation("org.springframework.boot:spring-boot-starter-web:$verSpring")
    implementation("org.springframework.boot:spring-boot-starter-actuator:$verSpring")
    developmentOnly("org.springframework.boot:spring-boot-devtools:$verSpring")

    // Logs
//    runtimeOnly("org.slf4j:slf4j-api:1.7.25")
//    implementation("org.slf4j:log4j-over-slf4j:1.7.25")
//    runtimeOnly("org.slf4j:jcl-over-slf4j:1.7.25")
//    runtimeOnly("ch.qos.logback:logback-core:1.2.3")
//    runtimeOnly("ch.qos.logback:logback-classic:1.2.3")

    runtimeOnly("biz.paluch.logging:logstash-gelf:1.12.0")

    // Test
    testImplementation("org.springframework.boot:spring-boot-starter-test:$verSpring")
}

springBoot.buildInfo()

quality {
    checkstyle = true
    consoleReporting = false
}

tasks {
    test {
        useJUnitPlatform()
    }
}

// for Docker..
jib {
    from {
        image = "bellsoft/liberica-openjdk-debian:8"
    }
}

publishing {
    publications {
        create<MavenPublication>("backend"){
            artifact(tasks["bootJar"])
        }
    }

    repositories {
        maven {
            name = "maven-releases"
            url = uri("repo_release_url")
            credentials {
                username = "user"
                password = "passwd"
            }
        }
    }
    repositories {
        maven {
            name = "maven-snapshots"
            url = uri("repo_snapshot_url")
            credentials {
                username = "username"
                password = "passwd"
            }
        }
    }
}
